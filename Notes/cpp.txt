by default members of structure are public and inside structures you can have only variables you can't have methods
that's why classes are invented
classes can have variables as well as methods and bydefault all members of class are private hence it's better with respect to security of the data

only static members of class get's initialized to default values in C++, all other non staic variables don't get initialized hence they will always have garbage value

class Employee{
  static int count;
};

int Employee::count=1111;

so static variable's you need to write at two places inside class also using static keyword you need to write
and outside class also after defining class , you need again declare to write with class name and now no need to write static keyword here
this is how compiler will under stand that this is static variable of class and it will by default ititialize it with 0, if you don't initialize it
static vars can't get initialized inside class you've to initialize it outside class only 

que: how to share data across the objects of single class?
ans: ofcourse by making static variables
because static variables can be accessed by all the objects of class, all object's can read same data using static variable

that's why non static methods can access static variables because It's a class variable hence without using object name directly that variable can be accessed
But
static method can't access non static variables 
it has 2 reasons
1) static members exist even before making object of class hence when you call static method using class name which is accessing non static vars ofcourse it will give error
bcoz no any object exist hence no any non static vars exist at this point of time
2) another reason is , suppose there are three objects of class x ,y,z and now using class name you are calling static method and try to access some variable i
static void fun(){
  i++;
}
now which i is this? is this i belogs to x or y or z? that compiler won't be able to understand that's why this will also give error 
because i exist 3 times bcoz it's not a static 
hence non static function can access static members
but 
static member's can't access non static members


class Complex(){
  int a,b;
  public:
    void setNumber(int x,int Y);
    friend Complex addNumber(Complex O1,Complex O2);
};
void Complex::setNumber(int x,int y){
   a=x,b=y;
}

Complex addNumber(Complex O1, Complex O2){
  Complex O3;
  O3.setNumber(O1.a+O2.a , O1.b+O2.b);
  return O3;
};

int main (){
  Complex O1,O2,O3;
  O1.setNumber(2,3);
  O2.setNumber(3,5);
  o3=addNumber(o1,o2);

}

friend function are used to access private members of any class (or many classes)
when we want to perform operation using private members of more than one class then we can declare a function as friend to both those classes 
same function can be friend of many classes
friend function is separate entity it's not member of any class
classes are just making that function as their friend. by declaring any function as friend in any classes all the private member of that class can be access through that function

you can see the difference when you defining both function above
when you are defining class member function you have to use Class name and scope resolution operator 
but while defining friend function no need to use class name because friend function is not member of any class it's just friend of class 

you can declare friend function in public as well as private both the section, even if you declare any friend function as private , nothing will change in implementation still you can access it outside simply
nothng will change because friend function is not member of class hence declare in public or private doesn't makes any difference

another difference in friend function and in member function is in member function you can directly access a , b vars w/o using obj name
but in friend function you can't access vars w/o object name you have to use object and membership operator  like obj.a obj.b
because if you only write b then whose b is this? is this O1's b or O2's b , hence compiler will get confused

another difference b/w member function and friend function is member function can be called using obj.setNumber() only but friend function is not member of any class hence no need of obj.function_name

making other member's function as friend to other class , Member class, Forward declaration etc, watch video 27 of code with harry c++ playlist
https://www.youtube.com/watch?v=Tk-4KUoatg8&list=PLu0W_9lII9agpFUAlPFe_VNSlXW5uE0YL&index=27&ab_channel=CodeWithHarry

Constructors
if you don't make any constructor then compiler will make 2 constructors by default in all the classes
one is default constructor which takes no any argument
another is copy constructor which only does shallow copy

now if you have only one variable inside class which you want to set while creating object
then 
Student s(9); is same as Student S=9;
s(9) is same as s=9 only during the declaration line 
if after declaration of s object you assing then assignment operator will get invoked which ofcourse you've not defined in your class so it will lead to error

member function of class can access any member of class whether it's public or private or protected 
hence if we've two object o1 and o2 then o1's method can also access all varibales of o2 also because they both belongs to same class only

Dynamic memory allocation
int *ptr = new int;       //for single variable
int *ptr1 = new int[n];    //for array of size n

for freeup the dynamically allocated memory
delete ptr; //for deleting memory pointed by ptr
delete[] ptr1;  //if ptr1 is pointing to an array then you've to tell compiler that you need to free up entire array hence here square brackets [] are required along with delete keyword 

when you don't create any constructor , compiler will create default constructor which will not take any parameter
but when you create even single constructor now compiler will not create default constructor
and if your constructor which you've created is parameterized constructor then while creating objects you've to 
pass those parameter , now simply you can't create object like
Student s; // this will lead to an error that no matching function 
because now there's no any default parameterless constructor exists , if you want to resolve this error and you still want to create normal parameter less objects then you have to create one more default constructor along with your parameterized constructor

class Student{
  string name;
  int id;
  public:
  Student(){}
  Student(int id){
    this->id=id;
  }
};
//deep copy constructor
class Employee{
    int size;
    int *Ptr;
    public:
      Employee(Employee &obj){   //think on this why here we have to use reference variable
         size=obj.size;
         ptr=new int[size];
         for(int i=0;i<size;i++){
            ptr[i]=obj.ptr[i];
         }
      }
};

Employee E1;
Employee E2(E1); => this is same as Employee E2=E1; // both syntax will call copy constructor only

but if you write in next line like this,
Employee E2;
E2=E1; then now = operaotr of class Employee will get called , and if you've not defined it then you have to overload = operaotr for your class

now, while making copy constructor why we used reference variable and why we did not used normal variable?
because when you write Employee E2(E1); then internally it will implement at copy constructor as obj=E2
this obj is object which we used while making copy constructor
so now obj=E2 is same as obj(E2) this means again copy construcotr will be called for obj 
and this way it will lead to call back hell hence to avoid it we have to use reference variable

Destructor:
class Number(){
  public :
    ~Number(){

    }
}

Destructor deoesn't takes any parameters, hence only one destructor is possible hence there's no overloading possible for destructor

constructor overloading is possible because parameterized constructor are possible
so, any class can have multiple constructors but only one destructor is possible


inheritance
class child : visibility_mode parent1,parent2.......
{
};

by default visibility mode is private if you don't mention any visibility mode

class Base{
  public :
    int fun(){
      cout<<"Base";
    }
};

class Derieved : public Base{
    public:
};

int main(){
  Derived obj;
  obj.fun(); //here when you create object then at compile time everything is known to compiler that how many things does 
            //obj has. obj will have all the properties of itself + all the public and protected properties of parent
            //BUT
  Derived *ptr=new Base()://BUT when you create pointer
  ptr->fun();    //here it will give error because ptr is of base class and base class doesn't have fun() function
  // why does it gave error ? because pointer is not like object which has all the information , pointer is just a variable
 //just a simple variable which can hold address that's it , it doesn't have any other information that what that class has
//what parent of that class has , pointer only knows one thing that it can store address 
//now you are creating object of parent using new and then you are assigning it to ptr but that's dynamic object and it will get created at run time and not at compile time , at compile time compiler only knows that ptr is of type Derived class
and if it has fun() then it will bind it at compile time otherwise it will give error because at compile time compiler doesn't know what's inside ptr and what ptr will be pointing to at run time 

//hence when you create object then it will go to parent and try to find function if it's not present in base class
//but if you create ptr then it won't be able to go to parent to find if function present of not at compile time
}

Diamond problem and Virtual Base class
    A
B        C
    D
B and C both are inheriting A
D has two parent class B and C 
now if A has some property let's say A has variable x 
so it will be inherited in B and C both 
now when D tries to access x then which x to access ? B.x or C.x ? that's the ambiguity and that's called diamond problem
and it's solution is virtual base class 

when you inherit A in B and C then declare A as virtual base class so that whenever any class inherit's B and C both like D
then A's property will only be reflect once in D

syntax:
class B : virtual public A            //virtual public or public virtual both we can write 
{
};

class C : virtual public A
{
};

class D : public class B,class C
{
};

Initializer list
class Test{
  int a;
  int b;
  public:

  Test(int i,int j):a(i) , b(j){   //so, this is the initialization section , using this also you can initialize variables
    //constructor body
  }
}

at line no. 232 we can try below things
Test(int i,int j):a(i) , b(i+j)
Test(int i,int j):a(2*i) , b(i+j)
Test(int i,int j):a(i) , b(a+j) //since we've declared a first and then b inside class hence a will get initialized first with i and then when compiler will go to initialize b then a's value will be available
BUT
Test(int i,int j):a(b+i) , b(j) //here compiler will first go to initialize a and at this point of time b's value is not available hence b has garbage value at this point of time hence garbage+i = garbage => so, a will be initialized with garbage value 

Test(int i,int j): b(j),a(b+i) // even you write b , before the a still a will get initialized first and then only b will get initialized hence here also b will have j's value but a will have garbage value


//constructor's calling order /execution order 
class Derived : public Base1 , public Base2
{
  int x,y;
  public:
  Derived(int a, int b, int c , int d) : Base2(d),Base1(c)
  {x=a,y=b}

}

whatever order you call at 252 line but still Base1(c) constructor will be executed first and then only Base2(d) will be executed because that's the order in which you've inherited at 248 line
so, the order in which you inherit in that order only constructors will get executed

BUT there's one exception with virtual base class , if any of your parent is virtual then irrespective of wherever you've written , virtual base class's constructor will always execute first

class Derived : public Base1 , public virtual Base2
{
  int x,y;
  public:
  Derived(int a, int b, int c , int d) : Base1(d),Base2(c)
  {x=a,y=b}

}
//although you are calling Base2's constructor after Base1's constructor but still Base2() constructor will be executed first becasue virtual base class is given highest priority

this pointer and how to return object which is calling It's funtion using this pointer watch video below
https://www.youtube.com/watch?v=cEOfK_L4gGA&list=PLu0W_9lII9agpFUAlPFe_VNSlXW5uE0YL&index=53&ab_channel=CodeWithHarry

video 55 https://www.youtube.com/watch?v=0YQ_yhX46uk&list=PLu0W_9lII9agpFUAlPFe_VNSlXW5uE0YL&index=55&ab_channel=CodeWithHarry


pointer of base class can point to object of derived class
but 
pointer of derived class cann't point to object of object of base class

A virtual function cannot be global or static because, by definition, a virtual function is a member function of a base class and relies on a specific object to determine which implementation of the function is called.

Constructor can not be virtual, because when constructor of a class is executed there is no vtable in the memory, means no virtual pointer defined yet. Hence the constructor should always be non-virtual.

pure virtual function
virtual int fun()=0; //it's having no body

Destructor can be virtual so that we can override the destructor of base class in derived

if a pointer points to a base class, but the pointer points at runtime to a derived class, then the base class must have a virtual destructor in order to destruct the derived class.

template class syntax

template<class T1 , class T2>
class vector{
  T1 a;
  T2 b;
  public:
    vector(T1 x,T2 y){
      a=x,b=y;
    }

    void display(){
      cout<<a<<b;
    }
}

int main(){
  vector<int float> v(1,3.14)
  v.display();
}


--------------
in recursion problems always always focus first on solving problem ,till now I was directly jumping on writing base condition and that's why recursion was feeling hard, bro never ever think on base condition , first solve the problem
first write original solution and then dry run your solution on smaller test casses and then you will automatically realize where to stop , means it will automatically give you idea base condition , if you directly jump on base condition then you will not able to get the idea and you will end up wasting lot's of time in interview or in OA

void reverse(string str,int start,int end)
{
  if(start>=end) return;

  swap(str[start],str[end]);
  return reverse(str,start+1,end-1); //in this line never pass start++ or end-- =>because first start and end will be //passed and then post increment or decrement will be evaluated so, it will give you TLE , instead you can use ++start, 
//--end
}

int main (){
  string str="xyzw";
  reverse(str,0,str.size()-1); 
}

there's very big mistake in above program , can you guess???????????

yes, only in case of arrays , addresses will be pass but here it's string class and str is not array it's object of some class (it's OBJECT , AND NOT AN ARRAY) , although internal implemenation is based on array only but outside it's object
and object never passed using reference or using addresses,
Object of any class, whether userdefined or predefined , will always be pass by value ,never pass by reference

hence reverse function should use string as reference
void reverse(string &str,int start, int end)


-------
for any char ch;
to convert lower case to upper case => 'A' + ch-'a' 
to conver upper case to lower case =>'a' + ch - 'A'
-----------

finding lowerbound=finding ceil of a number in sorted array = finding insert position of a number 
all above question has same solution
finding lowerbound   is also same as fidning upper bound the only difference is you don't need to return element even if it present , so, instead of <= use < in codition writing 
while(left<=right)
{
  mid= left + right-left/2;
  if(target<=arr[mid])
    right=mid-1;
else 
  left=mid+1;
}
return left;

for finding floor of a number in a given sorted array use >= in above function

so, lower bound , upperbound, floor , cieling , insert position , first occurence, last occurence of a number all these question use same program only, using same lowerbound code or just by doing <= to < or to >= all these problems can be solved 

lower and upper words are looking opposite to each other but here in programming context  , meaning of both are not opposite but both has same meaning only
lower_bound means index of element which is >= target
upper_bound means index of element which is > target

now during online assessment , we shouldn't write entire code for it , instead we have algorithms provided in stl so use them

 int gfg[] = { 5, 5, 5, 6, 6, 6, 7, 7 };
 
vector<int> v(gfg, gfg + 8); // 5 5 5 6 6 6 7 7

vector<int>::iterator lower, upper;
lower = lower_bound(v.begin(), v.end(), 6); // these functions return iterators (pointers) and not the element
upper = upper_bound(v.begin(), v.end(), 6); // hence you need to subtract begin() iterator from ans to get index

cout << "lower_bound for 6 at index "
     << (lower - v.begin()) << '\n';
cout << "upper_bound for 6 at index "
     << (upper - v.begin()) << '\n';

same with array also
lb_index = lower_bound(arr, arr+n , target) - arr ; // to get index we must subtract first address means arr
up_index = upper_bound(arr, arr+n , target) - arr ; // to get index we must subtract first address means arr

while finding first and last occurences of a number edge cases you need to keep in mind that what if number is not present at all in the array, and that time also 3 cases can occur 
number is smaller then the first element of array (so right pointer will become -1 at the end)
number is greater then larget number of array ( so left will become N(size of array )) 
number is smaller then some element and bigger then some element of array but not present in array(so here left and right will be inside the range only but they will not point to correct ans bcoz number is not present in array) 

once you find first and last occurences of a number , then another problem which you can solve is find the frequency of a number in sorted array, or cound number of occurence of given target in sorted array in (log base 2 N) time


whenever you are confident that your code is 100% correct only and if it is passing 100s of test cases but failing only few test cases then how can my solution be wrong , it is already passing 100s of similar test cases
but why only few are failing then , it might not be that your logic is wrong , but your logic is correct only but somewhere if your input is very big but you've taken small container that's why your ans is failing for few test cases like in count inversions question input array was containing long long array but to store temperory arays I took only int array and because of this my 100 test cases passed only 17 was failing and I doubted on myself , so that's why all googlers were saying never doubt yourself keep doing untill you placed, so I kept doing Untill I reached to the successfull acceptance of that question
https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1

So, It's not that you are not able to think , or logic nahi lagana aata, my logic was entirely unique and no one had that logic , and my logic was correct only but the only thing was silly mistake that if input is long long then how can I take temp array as int only bro ?? so, be aware of these kind of situation



______________________
I did mistake in interview 
they asked me clearly that there are only small brackets () -> means there were only one kind of brackets then which data structure you will use inorder to check whether given string of parenthesis is valid or not?
here I said I'll use stack and that's where I was rejected 
when there is only one kind of brackets then you don't need to maintain them in any data structure you just need to maintain open and close brackets count 
whenever there's open bracket do open++
wherever there's close bracket then do open-- and this time check that open is not going -ve 
if there 's one open bracket but 2 close bracket then 
()) -> open++ open-- open-- ->so open will become -1 so, whenever open will become -ve that means string is not balanced(parentheses are not balanced) 
so on every close bracket you need to do open-- and then check that It's not gone to -ve if it goes to -ve then immediately break the loop

now after comming out of loop if you come out loop without reaching at the end of string then return false
if you've scanned entire string and came out then check that open==0 => count of open bracket's must be 0 at the end of entire string 
if(open==0)return true;
else return false;

that's it , you only need single variable to to check whether paranthesis are balanced or now when there's only one kind of brackets present, but if there's more than one kind of brackets present, i.e. if even 2 kind of brackets are present then definately you'll need stack to track whether ( bracket came last or { came last , whoever came last corresponding closing bracket must come 


Linked list:
why it is advantage over array?
bcoz in array we need to predefined size, hence either there will be shortage of space or some space we will ended up wasting if desired number of input we don't receive
but 
linked list is entirely flexible, we can use as much space only which we needs, jetli joie etlij use karva male bcoz we will make only required amount of nodes

now interviewver will ask if static array is not flexible then why don't you use dynamic array? use array then , bcoz it's flexible

then the ans is vector is flexible but not as much as linked list bcoz vector or dynamic array also get's created in Heap memory now if as of now vector has capacity of 8 and 8 elements are already present now if you want to insert just one more node then since arrays are always contiguous and vector always get's double in capacity whenever it overflows so, first it will go and find double size in heap , whether 16 space is available or not in heap then it will copy all old 8 elements here and then new element will be inserted , so this is also increasing time complexity as well as if in future we don't need remaining 7 space then it will be wasted but 
if you are using linked list then in heap memory we will create just one extra node and immediately we will insert new element there and this will just take O(1) time only, and no any extra space will be wasted bcoz we are not alocating any extra space , so space wise also and time wise also linked list is flexible and more efficient that's why over array we needed linked list

use of nested function in c++ 
https://leetcode.com/problems/find-all-groups-of-farmland/solutions/5048269/beated-find-all-groups-of-farmland/
benefit is if you use nested function then inner function has access to all the variables/data of outer function so, you don't need to pass all those data to that inner function  while calling it and still all those variables inner function can use

but 

when you don't use nested function and instead you define inner function outside the outer function then you need to pass all those data into arguments to use them in that outsider function and it will need copying all data there hence it will use more memory bcoz now both function uses diff diff variables and also it requires more execution time bcoz copying data from formal arguments to actual arguments also takes time

//////////////
interview Tips to solve the questions

Every Linked List Problem, if you can't do it in LinkedList format,
copy the data in array/vector and now your question would become for an 
array, solve it.

As you know, if any problem you can do using stack only then you can use recursion as well ( mostly )., means you can solve same problem with recursion as well


in linked list questions if your code is failing to cover some edge cases then always edge cases will lie in either frist node or at last node , means around head or at end last node only at these 2 places edge cases lies in linked lists


In C++, you can compare two deque (double-ended queue) objects using the standard comparison operators such as ==, !=, <, <=, >, and >=, as long as the element type of the deque supports these operations.
means if you need to only compare strings then use strings but you need to compare strings by adding chars at front and then you need to compare newstring with maximumvaluestring or minimumvalue string lexicographically then for adding a char at front takes O(N) time for string but in place of string if you use dequeue then it takes o(1) time only for push_front or push_back both operations + pop_front and pop_back also and why to use dequeue? bcoz same like strings you can compare dequeue also as == , < ,  > like all comparision operators


to get min value in integers we take min=INT_MAX by default so that any value in integer array will be smaller then it and hence ultimately we will get min value in min variable

but what if we want to compare strings? then what should be taken as defalt value for minstring? what can be the maximum lexicographically biggest string? it's nothing but the vertical bar 
take minStr='|' bcoz it's ascii value is 124 and small 'z' has ascii value 122 hence vertical bar will have highest lexicographical value hence to compare with other strings we can use it

slow pointer and fast pointer approach for finding loop inside linked list
for this interviever can ask proof for the solution that why does it work always ? 
for providing proof , when slow pointer is at starting node of linkedlist at that time measure the distance between slow and fast pointer now in every iteration distance between slow and fast pointer will decrease by one and this way after some time you can say that distance will definately become 0 after sometime that's why this solution will definately work

importance of do...while loop
to traverse circular linked list having no tail pointer or no extra dummy node to separate first and last node of the list I tried below code first 

{
  Node *curr=head;
  if(curr)
    cout<<curr->data<<" ";
    curr=curr->next;

  while(curr!=head){
      cout<<curr->data<<" ";
      curr=curr->next;
  }
}

in above code you can see same code is repeating inside if block and while block as well which is not good practice as per the DRY principle but I had to do it bcoz to stop I need a condition curr!=head but if I directly use it then on the first node itself I'll come out of loop bcoz curr and head are pointing to same node only hence I had to print first node separately to move curr one point ahead now curr and head are not same 

so whenever you face such issue that first operation you have to do it without any condition and rest operations you want to perform with some condition then at that time do while ko yaad karo which performs first operation unconditionally and DRY will also be satisfied

{
    if(!head)        return;
        
    Node * curr=head;
    do{
        cout<<curr->data<<" ";
        curr=curr->next;
    }while(curr!=head);
}

how beautifully it's handled and interviewer will also happy

https://www.youtube.com/watch?v=RrmDZv1i9W8&ab_channel=CoderArmy ->great video on remove cycle from linked list if present , great explanation /maths behind o(1) space complexity


one of the great logic and no one has done this question in just 2 loops in entire leetcode this guy's solution is just great but its' uses DP , DP is very good and very beautifully manages everything with very small code and very less traversal of matrix here everything is beeing done in just single traversal ,checkout below link
https://leetcode.com/problems/find-all-groups-of-farmland/solutions/5049280/o-n-js-solution-2-for-loops-only/

below is the question related to modular arithmatic , it is the example of mind blowing use of modular arithmatic
https://www.geeksforgeeks.org/problems/multiply-two-linked-lists/1?utm_source=geeksforgeeks&utm_medium=ml_article_practice_tab&utm_campaign=article_practice_tab

clone of the linked list without any extra space and in linear time
https://www.youtube.com/watch?v=pReLgYYYHJo&ab_channel=CoderArmy
https://www.geeksforgeeks.org/problems/clone-a-linked-list-with-next-and-random-pointer/1?utm_source=geeksforgeeks&utm_medium=article_practice_tab&utm_campaign=article_practice_tab


-------------
if you want to reverse the data in any data structure other than array , where you can't use two pointer technique then use stack to reverse them
first push everything into stack now when you remove data from stack you will ofcourse get last in first out hence everything you will get in reverse order
---------

to check two numbers have same sign or diff diff sign dont use > and < operator like
if( a>0 && b>0 || a<0 && b<0) then same sign 
else diff diff sign
this is very dumb way to compare whether sign of both element are same or not then what's smart way?  -> xor operation

bool haveDifferentSigns(int a, int b) {
    return (a ^ b) < 0;
}

if number is -ve then it's MSB will be set other wise unset
if both number has same sign then MSB  of xor will be 0 means a^b will be positive 
if both number has diff diff sign then MSB of xor will be 1 means a^b will be -ve 
---------------
extreamly beautiful question on tree
https://leetcode.com/problems/distribute-coins-in-binary-tree/description/?envType=daily-question&envId=2024-05-18
before seeing this question I was thinking that there will be many ways to traverse the tree which might be soo much complex and I don't know them, but after getting solution of this problem I was amused that there's nothing that I don't know . always remember that there's only 3 ways to traverse the tree inorder, preorder and post order and we always go inorder to solve any kind of tree quesiton so, never ever fear that there's something which I don't know. I know everything but just need to go one extra step that's it. keep on thinking on solution and you will definately get it.


------------
https://leetcode.com/problems/sum-of-all-subset-xor-totals/solutions/5181870/fastest-100-video-explanation-easy-to-understand/
need to understand above logic

-----------
single pass solution and most effective solution
https://leetcode.com/problems/longest-palindrome/solutions/5255189/easiest-solution-approach-c-java-python-javascript-beginner-friendly/

