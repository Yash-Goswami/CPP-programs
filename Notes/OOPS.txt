Object is an entity that has state(attributes) and behaviour.
Anything which exist in real world / physical world is object.

Class is just a blue print which says how my object will look like, class doesn't exist in physical world.

Women is a class bcoz it doesn't exist in real world, 
but neeta , gita , Himani , Jeel are objects , bcoz they do exist in real world.

in C++ Empty classes also give's 1 byte when we create object of them
class Empty{};

int main()
{
    Empty A,B;
    cout<<sizeof A <<" "<<sizeof B; 
    //o/p : 1   1 

    return 0;
}

Even though an empty class seems like it should have zero size, the C++ standard mandates that objects of any class must have a size greater than zero. This is to ensure that each object has a unique address.
The reason for this is due to the uniqueness requirement of object addresses in C++. Even though an empty class has no data members, the compiler ensures that each object of that class has a distinct address. Therefore, it assigns a non-zero size to ensure uniqueness.

If an empty class had a size of 0 bytes, then two different objects of the same class could have the same address, which would be a problem


watch second half of the below video
https://www.youtube.com/watch?v=iw1Xf_33YM0&ab_channel=CoderArmy
It's very very very important to watch it bcoz things discussed in this video is nowhere else present and no one has discussed it till now hence It's very important to watch it


Constructor
if we don't create any constructor then compiler will create 2 constructor default and copy constructor
if we create default constructor then compiler will still create 1 constructor i.e. copy constructor but now it won't create default constructor
if we create both default and copy constructor then now compiler will not going to create any constructor 

default constructor means , the constructor which doesn't take  take any argument 

for all the classes(for all the user defined data types) by default assingment operator(=) is overloaded into class

class Student{
 string name;
 int age;
 char grade;
 Student(string name, int age, char grade){
    this->name=name;
    this->age = age;
    this->grade=grade;
 }
};

int main(){
    Student S1("Yash,24,'A');
    Student S2;
    S2=S1;// this line will perfactly work and copy all data of S1 to S2

    //means by default although userdefined data types have different meaning for = operator still = is working fine means
  // compiler will be by default overloading = operator

}

Default destructor deosn't release dynamically allocated memory , means default constroctor can't prevent memory leak
you have to create your own destructor to prevent memory leak

Default destructor just do only one thing-> it just call destructor of parent class that's it


--------------------------------------------
class Programmer{
    static int count;
    int ObjectNumber;
    
    public:
    Programmer(){
        ObjectNumber=++count;
        cout<<"Object "<<ObjectNumber<<" constructed"<<endl;
    }
    ~Programmer(){
        cout<<endl<<"Object "<<ObjectNumber<<" destructed";
    }
};

int Programmer::count;

int main()
{   
    Programmer O1,O2,O3;
    Programmer *O4=new Programmer();
    return 0;
}
output:
Object 1 constructed
Object 2 constructed
Object 3 constructed
Object 4 constructed

Object 3 destructed
Object 2 destructed
Object 1 destructed

->three things to notice here 
1] constructors of the object are called in the order in which you are creating object
2] but destructor of the objects called in the reverse order, means the object you created first destroyed last, and the object you created last was destroyed first
3]destructor of the dynamically created object doesn't get's called and leads to memory leak
    however program execution completed but still It's destructor doesn't got called 
   so you have to use-> delete O4; then only It's memory will release , or destructor of O4 will be called

Why destructors are called in reverse Order ✅✅
This is because the objects are created in a Stack which follows the LIFO order, so when one object gets out of the stack, its destructor gets called. Also, the intuition behind this LIFO order is that, one object can be dependent of other object in case of copy constructor.

Eg: for Customer A4(A3), suppose A3 contains one dynamically allocated data, it means that A4 is dependent on A3.
Now, if A3 is destroyed first, then that heap memory is also going to be destroyed and A4 will not have any data to point to.


--------------------------------
What is difference between Encapsulation and Abstraction?

Encapsulation means binding objects properties(variables) and behaviour(methods) together at one place and after that making variables private and to access them defining public method like setters and getters this is called encapsulation of the data.

class Student{
    int age;
    int rollNum;
    int pin;
public:
    void setAge(int age){
        if(age>0 && age<100)
            this->age=age;
        else 
            cout<<"Invalid Age";
    }

    int getAge(int pin){
        if(this->pin==pin)
            return age;
        else
            cout<<"wrong password";
    }

    //similarly setRollNum and getRollNum can be defined conditionally like this
};

so above is the exaple of Encapsulation , no one can directly access Student's property(vars) and can't set any random values to age or roll number
if your age and rollNum are public then any one can set any wrong value to the age 

Student Amit;
Amit.age = -50;

So, this is violating Encapsulation property that's why difining all the vars as private is very important so that no one can randomly access and set garbage values to our precious data, and to set the age we need to provide It's public methods and there we need to have all the validations so, that only proper data goes to the data

here to get the data also you first need to provide your password , if password and username something like that matches then only you will get correct age otherwise you will get error
so, these things called Encapsulation

Encapsulation: defining all vars as private and providing public method to access them so that no one can directly access vars , and only using their proper method , someone can accesss the data and that also if they provide correct information to setters and getters then only

Abstraction means just providing relavent data to user and hiding all the actual implementation to user
(here user are those who are coders only, and using our methods or our class created by someone else )
end user just wants to call those methods and doesn't want to know how they are implemented actually behind the seen

pow(x,r)
in power function when you give 2 and 5 then it will give you 32 , so, user will just know how to use this method that's it , user doesn't know how actually 2 power 5 is getting calculated

sort(v.begin(),v.end())
user will give array to sort function and get the array sorted that's it user will not able to see which sorting algorithm is implemented inside sort fuction all those code inside sort fuction user doen't wants to know user just wants to use that function and get his work done

we are using many library function to get the substring, to get the toUpper, toLower all those are example of Abstraction, Actual implementation of those function are hidden from us because we don't want to know how they are implemented , we just want to use them and wants to done our work that's it.

So, hiding the actual implementation(unneccessary details) from the end user and just providing usefull information to user that's Abstraction.

--------------------------

Inheritance: is all about re-using the already available code and avoiding re-writing same code again and again 
that can be achived by creating base class and derived classes
all the property present in base class can be re-used in derived class insted of re-writing them

private we knows that we use it so that no one from outside can access them and set random values to vars
public we use so that using publically available methods external code can set or get values of vars using some proper mechanism only instead of randomly accessing anything 

so, using private and public we achieved encapsulation
but what is the need of protected?

protected members only can be accessed by derived classes and outsider's still can't access them
after encapsulation we were in need of code reusability and for that purpose if we can't use private members bcoz they can't be accessed outside class and we also can't use public members to define vars bcoz otherwise randomly any one can change any value and where -ve values are not expected there also someone can set -ve values , 

so, to implement code reusability , protected access specifier was invented
protected members are behave as private for external code, bcoz other's can't access it 
and for derived classes it behaves as public bcoz derived clases can use them for code re-usability

so, using protected re-usability also ensured and for external code, encapsulaiton also ensured bcoz protected code works as private for all the external code.

ek tir se 2 nishan
protected -> ensures re-usability + encapsulation

types of inheritance
1) single 
class A
class B : access_modifies A

2) multi level
class A 
class B : access_modifies  A
class C : access_modifies  B

here if all 3 classes have fun() function and we create object of C 
C obj;
obj.fun(); -> which fun() will be called?

compiler always see what type of object it is , obj is of type C hence first it will go and find fun() in C only if it finds there then it will execute C::fun() , if class C doesn't have fun() then only it will go to it's parent and try to find fun(), now if B has fun then it will execute B::fun() and if C and B both doesn't have fun() then only it will go in A and try to find A::fun(), when all 3 class doesn't have then it will give error

3) multiple
class A 
class B 
class C : access_modifies  A, access_modifier B   -> if both access_modifiers are same then it can also be written as => class C : access_modifier A,B

here constructor calling order is C then A then B hence A first will execute then B and at last C will execute 
class C : public A , public B
{
C(): A(),B()    // this way compiler writes it in the same order you inherit them
};

hence constructor execution order is A,B ,C but what will be order of execution of destructor?
destructor will always execute in reverse order then the constructor always always remember it
hence Destructor's execution order will be C,B,A

if you change order of inheritance then
class C: access_modifier B,A
then execution order of 
constructor order B,A,C
destructor order  C,A,B


Multiple inheritance means multiple parents

4) hierarchical -> means multiple child
class A
class B : access_modifier  A
class C : access_modifier  A

5)hybrid (also called multipath)
it's combination of two or more of above 4 types of inheritance

class A
class B : access_modifier  A
class C : access_modifier  A
class D : access_modifiere B,C

so this is also called multipath inheritance bcoz all the properties of A will be inherited to D via multiple paths  
A->B->D and 
A->C->D
which will cause Diamond problem because for any property calling for D which is also present in A , for all such properties compiler will get confused

one way to solve it is you specify that which property you want to access  suppose A has age then while using age in D use obj.B::age or obj.C::age now compiler won't be confused
but this is implementatin dependent , some compiler supports it and give's the correct o/p and doesn't give error , but some compiler doesn't support it and give's ambiguity error I have seen that some compiler gives error some doens't give error

hence the best and correct way to resolve this error is to use virtual base class

class A
class B : access_modifier  virtual  A
class C : access_modifier  virtual  A
class D : access_modifiere B,C

use of virtual keywork while inheriting A, ensures that only one copy of A will be present in D

here you can write anything, 
class B : public virtual A
class B : virtual public A
both are valid

now in this hybrid inheritance what will be order of execution of the constructor and destructor?
constructor execute in order = A,B,C,D
destructor will ofc execute in exactly reverse order  = D,C,B,A

--------------
Polymorphism: is of 2 type Compile time and Runtime
when you don't write virtual keyword then compile time polymorphism occurs and when you write function in parent class with virtual keyword then Runtiem polymorphism ensures

operator overloading
class Complex{
int real,imaginary;

public:
Complex(){} //default constructor, you have to make bcoz now compiler won't make
Complex operator+(const Complex &obj){
    Complex obj;
    obj.real = this->real+obj->real;
    obj.imaginary = this->imaginary+obj->imaginary;
}

};

in operator overloding we've to pass args as pass by reference to avoid call back hell
eventually using of reference and const vars are ofcourse give's better performance and provides security because when you use pass by reference then copies don't occur hence especially for larger objects since copies of values doesn't occur time will be saved and since we have used const keyword hence no one can modify original object

why private member was accessed in operator overloading?
you can see real and imaginary are private members of Complex class and still we are able to access other object's real and imaginary inside operator+ function for obj
so, here one rule apllies that , a class can access any of private members of all it's objects

so, obj is of type complex only hence we can acess other objects of complex class also inside the Complex class


why object created inside operator overloading was not deleted?
while returning it before function execution get's completes and that object get's destroyed , a copy of that object get's created and passed to the object wherever it was called 
like in main()
complex C3 = C1 + C2; 
then copy of obj will be created and passed to C3 before everything get's destroyed


why parent class pointer can point to child's object but not vise versa?

Parent Pointer to Child Object:
A parent class pointer can point to a child class object because:
The child object contains all the members that the parent pointer expects to access.
The pointer can access those shared members without issues.
Animal* animalPtr = new Dog();  // Valid, Dog is a type of Animal

 Child Pointer to Parent Object:
A child class pointer cannot point to a parent class object because:
The parent object might not have all the members that the child pointer expects to access.
Trying to access members that only exist in the child class would lead to errors.
C++
Dog* dogPtr = new Animal();  // Invalid, Animal doesn't have Dog-specific members

Real-Life Analogy:

Imagine a Vehicle class (parent) and a Car class (child).
A Vehicle pointer can point to a Car object because a Car is a type of Vehicle. It has all the essential features of a vehicle (wheels, engine, etc.).
However, a Car pointer cannot point to a Vehicle object that's not specifically a Car. It might be a motorcycle or a boat, which don't have car-specific features like doors or a steering wheel.

parent na badha members child ma to hovana j chhe etle parent no pointer jyare ena j members ne access karvani try kare using child't object tyare parent na to member ofc present chhe j child ma hence it can access them
but jyare child no pointer banavo and ema parent no oject pass karo tyare j vaat lage ne bcoz child me je pan members chhe e parent ma chhe j nahi , etle child jyare ena j members ne access karvani try kare tyare error avshe bcoz object to parent no chhhe, jema e members j nathi present

hence parent pointer can point to child object but child pointer can't point to parent object

----------------------
class A{
    public:void fun(){
        cout<<"A"<<endl;
    }
};

class B{
    public:void fun(){
        cout<<"B"<<endl;
    }
};

class C: public A,B{
    
};
int main()
{
    C obj;
    obj.fun();
    return 0;
}

o/p
main.cpp:31:9: error: request for member ‘fun’ is ambiguous
   31 |     obj.fun();
      |         ^~~
main.cpp:20:17: note: candidates are: ‘void B::fun()’
   20 |     public:void fun(){
      |                 ^~~
main.cpp:14:17: note:                 ‘void A::fun()’
   14 |     public:void fun(){

aaya multiple inheritance ma pan ambiguity ni error aave, evu nathi ke C ma jo fun no male to pela e A ma jai ne gotshe bcoz A pela inherit karyu chhe , na evu nathi , it will give ambiguity error that's why you can't keep shape class as child and triangle , square , circle as their parent to call area method of those class 
that won't work

you have to make shape class as parent class and make triangle , squre , circle as their children and you have to use virtual keyword in shape class for area function so, that dynamically it will call area method of that perticular class only which was passed to It's parent's pointer 

---------------------
why virtual is required , where you can directly make object of child class and call it's method , 
when we have that easy way then why you are complicating the things and making parent's pointer and child ko point karvate ho , function ko virtual banate ho, why ??
below code is the ans
in real life project in industry we want below type of clear and concise and easy to understandable code 


class Shape{
    public:
        virtual void findArea()=0;
};

class Circle : public Shape{
    public:
        void findArea(){
            cout<<"3.14*radious*radious called"<<endl;
        };
};

class Square : public Shape{
    public:
        void findArea(){
            cout<<"length*breadth called"<<endl;
        };
};
class Triangle : public Shape{
    public:
        void findArea(){
            cout<<"sqrt([s × (s – a) × (s – b) × (s - c)]) called where s is half perimeter"<<endl;
        };
};

int main()
{
    Shape *p;
    vector<Shape*> plotsIown;
    plotsIown.push_back(new Square() );//here you can pass args to their respective constructors by passing 1, 2 or 3 arg to circle ,square or triangle respectively
    plotsIown.push_back(new Triangle() ); 
    plotsIown.push_back(new Circle() );
    plotsIown.push_back(new Square() );
    
    for(int i=0;i<plotsIown.size();i++)
        plotsIown[i]->findArea();
        
    return 0;
}
o/p:

length*breadth called
sqrt([s × (s – a) × (s – b) × (s - c)]) called where s is half perimeter
3.14*radious*radious called
length*breadth called

so, each and everytime you can't check that which kind of object I have and then I call method of that object only that's  why oops invented virtual , it will handle everything automatically

child no object banavo tyare koi function call karo to if child doesn't have that function then compiler will go and check into it's parent 
but jyare parent no object ke pointer banavo and parent ma e method present no hoy tyare compiler doesn't go and look into it's children's because at compile time next line's it doesn't able to see 
parent class to aapde upar j lakhie and child class neiche lakhie ne and compiler can read from top to bottom line by line only so , compiler ne khabar nathi ke ketla class parent na child aavshe niche hence it also doesn't know ke aa parent vali mathod je aapde call karie chhie e child ma present pan hashe ke nahi that's why it won't go to child from parent , that's why to enable that direction at run time bcoz at runtime everything is known we need virtual keyword
